ngModelController则是ng-model指令中所定义的controller。这个controller包含了一些用于数据绑定，验证，CSS更新，以及数值格式化和解析的服务。它不用来进行DOM渲染或者监听DOM事件。与DOM相关的逻辑都应该包含在其他的指令中，然后让这些指令来试用ngModelController中的数据绑定功能。

ngModelController方法
$render();
当视图需要更新的时候会被调用。使用ng-model的指令应该自行实现这个方法。

$isEmpty(value);
该方法用于判断输入值是否为空。 
例如，使用ngModelController的指令需要判断其中是否有输入值的时候会使用该方法。该方法可用来判断值是否为undefined,'',null或者NaN。 
你可以根据自己的需要重载该方法。

$setValidity(validationErrorKey, isValid);
该方法用于改变验证状态，以及在控制变化的验证标准时通知表格。 
这个方法应该由一个验证器来调用。例如，一个解析器或者格式化函数。

$setPristine();
该方法用于设置控制到原始状态。 
该方法可以移除'ng-dirty'类并将控制恢复到原始状态('ng-pristine'类)。

$cancelUpdate();
该方法用于取消一次更新并重置输入元素的值以防止$viewCalue发生更新，它会由一个pending debounced事件引发或者是因为input输入框要等待一些未来的事件。
如果你有一个使用了ng-model-options指令的输入框，并为它设置了debounced事件或者是类似于blur的事件，那么你可能会碰到在某一段时间内输入框中值和ngModel的$viewValue属性没有保持同步的情况。 
在这种情况下，如果你试着在debounced/future事件发生之前更新ngModel的$modelValue，你很有可能遇到困难，因为AngularJS的dirty cheching机制实际上并不会分辨一个模型究竟有没有发生变化。 
$cancelUpdate()方法应该在改变一个输入框的model之前被调用。记住，这很重要因为这能够确保输入字段能够被新的model值更新，而pending操作将会被取消。下面是一个例子：

$setViewValue(value, trigger)方法
该方法用来更新视图值。这个方法应该在一个视图值发生变化时被调用，一般来说是在一个DOM事件处理函数中。例如，input和select指令就调用了这个函数。 
这个方法将会更新$viewValue属性，然后在$pasers中通将这个值传递给每一个函数，其中包括了验证器。这个值从$parsers输出后，将会被用于$modelValue以及ng-model属性中的表达式。 
最后，所有位于$viewChangeListeners列表中注册的监听器将会被调用。

ngModelController中的属性
$viewValue

视图中的实际值

$modelValue
model中的值，它金额控制器绑定在一起

$parsers
将要执行的函数的数组，无论什么时候控制器从DOM中读取了一个值，它都将作为一个管道。其中的函数依次被调用，并将结果传递给下一个。最后出来的值将会被传递到model中。其中将包括验证和转换值的过程。对于验证步骤，这个解析器将会使用$setValidity方法，对于不合格的值将返回undefined。

$formatters
一个包含即将执行函数的数组，无论什么时候model的值发生了变化，它都会作为一个管道。其中的每一个函数都被依次调用，并将结果传递给下一个函数。该函数用于将模型传递给视图的值进行格式化。

$viewChangeListeners
只要视图的值发生变化，其中的函数就会被执行。其中的函数执行并不带参数，它的返回值也会被忽略。它可以被用在额外的#watches中。

$error
一个包含所有error的对象

$pristine
如果用户还没有进行过交互,值是true。

$dirty
如果用户已经进行过交互，值是true。

$valid
如果没有错误，值是true。

$invalid
如果有错误，值是true。